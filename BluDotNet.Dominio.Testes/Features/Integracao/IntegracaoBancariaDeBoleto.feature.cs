// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18034
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BluDotNet.Dominio.Testes.Features.Integracao
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("IntegracaoBancariaDeBoletos")]
    public partial class IntegracaoBancariaDeBoletosFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "IntegracaoBancariaDeBoleto.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("pt-BR"), "IntegracaoBancariaDeBoletos", "A integração bancária serve para\r\nfazer a conciliação dos boletos em aberto no\r\ns" +
                    "istema com os boletos que constam como pago no banco", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 7
 #line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "numero",
                        "valor"});
            table1.AddRow(new string[] {
                        "1",
                        "10"});
            table1.AddRow(new string[] {
                        "2",
                        "20"});
            table1.AddRow(new string[] {
                        "3",
                        "30"});
            table1.AddRow(new string[] {
                        "4",
                        "40"});
#line 8
  testRunner.Given("os seguintes boletos em aberto no sistema", ((string)(null)), table1, "Dado ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "numero",
                        "valor"});
            table2.AddRow(new string[] {
                        "10",
                        "100"});
#line 14
  testRunner.And("os seguintes boletos fechados no sistema", ((string)(null)), table2, "E ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Integrando com informacoes de todos boletos nos valores corretos")]
        public virtual void IntegrandoComInformacoesDeTodosBoletosNosValoresCorretos()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Integrando com informacoes de todos boletos nos valores corretos", ((string[])(null)));
#line 18
this.ScenarioSetup(scenarioInfo);
#line 7
 this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "numero",
                        "valor"});
            table3.AddRow(new string[] {
                        "1",
                        "10"});
            table3.AddRow(new string[] {
                        "2",
                        "20"});
            table3.AddRow(new string[] {
                        "3",
                        "30"});
            table3.AddRow(new string[] {
                        "4",
                        "40"});
#line 19
 testRunner.Given("a entrada", ((string)(null)), table3, "Dada ");
#line 25
 testRunner.When("executar a integracao", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 26
 testRunner.Then("deve fechar todos os boletos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Integrando com informacoes de valor divergente")]
        public virtual void IntegrandoComInformacoesDeValorDivergente()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Integrando com informacoes de valor divergente", ((string[])(null)));
#line 28
this.ScenarioSetup(scenarioInfo);
#line 7
 this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "numero",
                        "valor"});
            table4.AddRow(new string[] {
                        "1",
                        "15"});
#line 29
 testRunner.Given("a entrada", ((string)(null)), table4, "Dada ");
#line 32
 testRunner.When("executar a integracao", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 33
 testRunner.Then("deve notificar valores divergentes (esperado 10, encontrado 15) na importacao do " +
                    "boleto 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Integrando com informacoes de um boleto já fechado")]
        public virtual void IntegrandoComInformacoesDeUmBoletoJaFechado()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Integrando com informacoes de um boleto já fechado", ((string[])(null)));
#line 35
this.ScenarioSetup(scenarioInfo);
#line 7
 this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "numero",
                        "valor"});
            table5.AddRow(new string[] {
                        "10",
                        "100"});
#line 36
 testRunner.Given("a entrada", ((string)(null)), table5, "Dada ");
#line 39
 testRunner.When("executar a integracao", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 40
 testRunner.Then("deve notificar que o boleto 10 já estava fechado", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Integrando com informacoes de um boleto já fechado e valores divergentes")]
        public virtual void IntegrandoComInformacoesDeUmBoletoJaFechadoEValoresDivergentes()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Integrando com informacoes de um boleto já fechado e valores divergentes", ((string[])(null)));
#line 42
this.ScenarioSetup(scenarioInfo);
#line 7
 this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "numero",
                        "valor"});
            table6.AddRow(new string[] {
                        "10",
                        "150"});
#line 43
 testRunner.Given("a entrada", ((string)(null)), table6, "Dada ");
#line 46
 testRunner.When("executar a integracao", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 47
 testRunner.Then("deve notificar que o boleto 10 já estava fechado", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
